name: Rust Release

on:
  push:
    tags:
      - "v*"  # Runs when pushing a tag like v0.1.0

permissions:
  contents: write  # Required to create releases

jobs:
  build:
    name: Build Rust Binaries on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, macos-13]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo dependencies
        uses: Swatinem/rust-cache@v2                

      - name: Run Tests
        run: cargo test --verbose

      - name: Build & Package
        shell: bash
        run: |
          # build release for this platform
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            if [[ "$(uname -m)" == "arm64" ]]; then
              cargo build --release --target aarch64-apple-darwin
              BIN=target/aarch64-apple-darwin/release/reqvire
              OUT=artifacts/reqvire-darwin-arm64
            else
              cargo build --release --target x86_64-apple-darwin
              BIN=target/x86_64-apple-darwin/release/reqvire
              OUT=artifacts/reqvire-darwin-x86_64
            fi
          elif [[ "$RUNNER_OS" == "Linux" ]]; then
            rustup target add x86_64-unknown-linux-musl
            cargo build --release --target x86_64-unknown-linux-musl
            BIN=target/x86_64-unknown-linux-musl/release/reqvire
            OUT=artifacts/reqvire-linux-x86_64
          else
            echo "Unsupported OS: $RUNNER_OS"
            exit 1
          fi

          mkdir -p artifacts
          # put the binary at a known name…
          cp "$BIN" "$OUT"
          # …then archive it
          if [[ "$OUT" == *.exe ]]; then
            zip "${OUT%.exe}.zip" "$OUT"
          else
            tar -czf "${OUT}.tar.gz" "$OUT"
          fi

      - name: Upload Archives
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.os }}
          path: |
            artifacts/*.zip
            artifacts/*.tar.gz
 
   release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download All Archives
        uses: actions/download-artifact@v4
        with:
          # <- no name: so it pulls down every `binaries-*` artifact
          path: artifacts

      - name: List what we got
        run: ls -R artifacts

      - name: Create GitHub Release and Attach Archives
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: "Release ${{ github.ref_name }}"
          body: "Automated release of ${{ github.ref_name }}"
          draft: false
          prerelease: false
          # only the archives get pushed
          files: |
            artifacts/*.zip
            artifacts/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


